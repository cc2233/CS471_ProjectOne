/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs471projectone;

// ************ TO DO
//method: "update" to update all panels
//"Load" button should clear and reset everything
import java.io.*;
import java.util.*;
import javax.swing.*;

//BUTTONS 
//  Load : add to Ready and start running the highest priority process
//  Yield : move current running process to Ready after all other processes of same priority and move first in Ready to Running
//  Block : move current running process to Blocked, and move first in Ready to Running
//  Unblock : move a Blocked process to Ready 
//Methods 
//  insertAfterEqual : insert process into Ready after process w/ equal priority
/**
 *
 * @author Caroline Chey
 */
public class dispatcher extends javax.swing.JFrame {

    //input file "  .txt"
    public final String inputFilePath = "C:\\Users\\Scar\\Documents\\NetBeansProjects\\CS471ProjectOne\\processes_A.txt";

    PriorityQueue<Process> queueReady = new PriorityQueue<>();
    List<Process> ListBlocked = new ArrayList<Process>();
    Process runningProc;

    public dispatcher() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        status = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblReady = new javax.swing.JLabel();
        lblBlocked = new javax.swing.JLabel();
        lblRunning = new javax.swing.JLabel();
        listReady = new java.awt.List();
        listRunning = new java.awt.List();
        listBlocked = new java.awt.List();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPid = new javax.swing.JTextField();
        txtPstate = new javax.swing.JTextField();
        butReset = new javax.swing.JButton();
        txtPname = new javax.swing.JTextField();
        butBlock = new javax.swing.JButton();
        butYield = new javax.swing.JButton();
        butLoad = new javax.swing.JButton();
        butUnblock = new javax.swing.JButton();
        butExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        status.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Complete System Status");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblReady.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblReady.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReady.setText("Ready");
        lblReady.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBlocked.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblBlocked.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBlocked.setText("Blocked");
        lblBlocked.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblRunning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRunning.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRunning.setText("Running");
        lblRunning.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        listReady.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        listReady.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listReadyMouseClicked(evt);
            }
        });
        listReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listReadyActionPerformed(evt);
            }
        });

        listRunning.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        listRunning.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listRunningMouseClicked(evt);
            }
        });
        listRunning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRunningActionPerformed(evt);
            }
        });

        listBlocked.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        listBlocked.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listBlockedMouseClicked(evt);
            }
        });
        listBlocked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listBlockedActionPerformed(evt);
            }
        });

        jLabel6.setText("(Process ID , Process Name ) from highest to lowest priority");

        javax.swing.GroupLayout statusLayout = new javax.swing.GroupLayout(status);
        status.setLayout(statusLayout);
        statusLayout.setHorizontalGroup(
            statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(statusLayout.createSequentialGroup()
                        .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(statusLayout.createSequentialGroup()
                                .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(listReady, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                    .addComponent(lblReady, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBlocked, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(listBlocked, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(listRunning, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(lblRunning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statusLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {listBlocked, listReady, listRunning});

        statusLayout.setVerticalGroup(
            statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(1, 1, 1)
                .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReady, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRunning, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBlocked, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listReady, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                    .addComponent(listRunning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(listBlocked, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setFocusTraversalPolicyProvider(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 102, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Process Status");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Process#");

        jLabel4.setText("Process Name");

        jLabel5.setText("Current State");

        txtPid.setEditable(false);
        txtPid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPidActionPerformed(evt);
            }
        });

        txtPstate.setEditable(false);
        txtPstate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPstateActionPerformed(evt);
            }
        });

        butReset.setText("Reset");
        butReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butResetActionPerformed(evt);
            }
        });

        txtPname.setEditable(false);
        txtPname.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPname)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPstate, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPid, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butReset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPstate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(butReset)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        butBlock.setBackground(new java.awt.Color(255, 153, 51));
        butBlock.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        butBlock.setText("Block");
        butBlock.setToolTipText("");
        butBlock.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 153, 0)));
        butBlock.setBorderPainted(false);
        butBlock.setMaximumSize(null);
        butBlock.setMinimumSize(null);
        butBlock.setPreferredSize(new java.awt.Dimension(30, 22));
        butBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBlockActionPerformed(evt);
            }
        });

        butYield.setBackground(new java.awt.Color(255, 153, 51));
        butYield.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        butYield.setText("Yield");
        butYield.setToolTipText("");
        butYield.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 153, 0)));
        butYield.setBorderPainted(false);
        butYield.setPreferredSize(new java.awt.Dimension(30, 22));
        butYield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butYieldActionPerformed(evt);
            }
        });

        butLoad.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        butLoad.setText("Load");
        butLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLoadActionPerformed(evt);
            }
        });

        butUnblock.setBackground(new java.awt.Color(255, 153, 51));
        butUnblock.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        butUnblock.setText("Unblock");
        butUnblock.setToolTipText("");
        butUnblock.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 153, 0)));
        butUnblock.setBorderPainted(false);
        butUnblock.setPreferredSize(new java.awt.Dimension(30, 22));
        butUnblock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUnblockActionPerformed(evt);
            }
        });

        butExit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        butExit.setText("Exit");
        butExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butYield, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butUnblock, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(butLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(105, 105, 105)
                                .addComponent(butBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(butYield, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(butUnblock, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(butExit)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBlockActionPerformed
        // Block a running process

        if (runningProc == null) //cannot block the last remaining running process
        {
            JOptionPane.showMessageDialog(null, "No process to block!", "CANNOT BLOCK", JOptionPane.WARNING_MESSAGE);
        } 
        
        else 
        {
            ListBlocked.add(runningProc); //moving running process to Blocked
            runningProc = null;
            runProc();

            updateGUI();
        }
    }//GEN-LAST:event_butBlockActionPerformed

    private void butYieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butYieldActionPerformed
        // stop (not block) currently running process and Run next high-priority process
        if (runningProc == null) //cannot yield if there is no more in queueReady
        {
            JOptionPane.showMessageDialog(null, "Cannot yield! No running process!", "CANNOT YIELD", JOptionPane.WARNING_MESSAGE);
        }
        
        else  
        {
            txtPid.setText("");
            txtPname.setText("");
            txtPstate.setText("");

            Process temp = runningProc;
            queueReady.add(temp); //moving running process to Ready
            
            runningProc = null;
            runProc();
        }
        updateGUI();
    }//GEN-LAST:event_butYieldActionPerformed

    private void butLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLoadActionPerformed
        //Load processes from a .txt file

        listReady.removeAll(); //first, list is cleared

        try {

            readFromFile(inputFilePath, queueReady, ListBlocked, runningProc);

        } catch (FileNotFoundException ef) {
        } catch (IOException ei) {
        }

        //queueReady.element().pRunCount++;
        runningProc = null;
        runProc();
        
        updateGUI();

    }//GEN-LAST:event_butLoadActionPerformed

    private void butUnblockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUnblockActionPerformed
        // Unblock a blocked process
        txtPid.setText("");
        txtPname.setText("");
        txtPstate.setText("");
        
        if (ListBlocked.isEmpty()) //cannot Unblock is there is no Blocked process
        {
            JOptionPane.showMessageDialog(null, "No blocked processes!", "CANNOT UNBLOCK", JOptionPane.WARNING_MESSAGE);
        } 
        else if(listBlocked.getSelectedItem() == null) //nothing is seleced in listBlocked
        {
            JOptionPane.showMessageDialog(null, "Must select a blocked process!", "CANNOT UNBLOCK", JOptionPane.WARNING_MESSAGE);
        }    
        else 
        {
            String blocked = listBlocked.getSelectedItem();

            Iterator<Process> iter = ListBlocked.iterator();
            while (iter.hasNext()) 
            { //finding matching PID from ListBlocked
                Process temp = iter.next();
                if (temp.pID == Integer.parseInt(blocked.substring(0, 4))) {
                    queueReady.add(temp);
                    
                    iter.remove(); //removing from Blocked
                    
                    
                    
                }
                
            }updateGUI();
        }
    }//GEN-LAST:event_butUnblockActionPerformed

    private void listReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listReadyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listReadyActionPerformed

    private void listRunningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRunningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listRunningActionPerformed

    private void listBlockedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listBlockedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listBlockedActionPerformed

    private void butExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExitActionPerformed
        // Exit program
        System.exit(0);
    }//GEN-LAST:event_butExitActionPerformed

    private void txtPidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPidActionPerformed

    private void txtPstateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPstateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPstateActionPerformed

    private void listReadyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listReadyMouseClicked
        // if selected, display process status
        txtPid.setText("");
        txtPname.setText("");
        txtPstate.setText("");
        
        
        if (queueReady.isEmpty()) {

        } else {
            String selected = listReady.getSelectedItem();
            int selectedPID = Integer.parseInt(selected.substring(0, 4));

            Iterator<Process> it = queueReady.iterator();

            while (it.hasNext()) {
                Process temp = it.next();
                if (temp.pID == selectedPID) {
                    txtPid.setText(Integer.toString(temp.pID));
                    txtPname.setText(temp.pName);
                    txtPstate.setText("Ready");
                }
            }
        }
    }//GEN-LAST:event_listReadyMouseClicked

    private void listBlockedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listBlockedMouseClicked

        // if selected, display process status
        txtPid.setText("");
        txtPname.setText("");
        txtPstate.setText("");
        
        
        if (ListBlocked.isEmpty()) {

        } else {
            String selected = listBlocked.getSelectedItem();
            int selectedPID = Integer.parseInt(selected.substring(0, 4));
            Iterator<Process> it = ListBlocked.iterator();

            while (it.hasNext()) {
                Process temp = it.next();
                if (temp.pID == selectedPID) {
                    txtPid.setText(Integer.toString(temp.pID));
                    txtPname.setText(temp.pName);
                    txtPstate.setText("Blocked");
                }
            }
        }
    }//GEN-LAST:event_listBlockedMouseClicked

    private void listRunningMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRunningMouseClicked
        // if selected, display process status

        txtPid.setText(Integer.toString(runningProc.pID));
        txtPname.setText(runningProc.pName);
        txtPstate.setText("Running");


    }//GEN-LAST:event_listRunningMouseClicked

    private void butResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butResetActionPerformed
        // clears all text fields

        txtPid.setText("");
        txtPname.setText("");
        txtPstate.setText("");
    }//GEN-LAST:event_butResetActionPerformed

    //updates all GUI lists
    public void updateGUI() {
        //clearing all lists and text fields
        listReady.removeAll();
        listBlocked.removeAll();
        listRunning.removeAll();
        txtPid.setText("");
        txtPname.setText("");
        txtPstate.setText("");

        Iterator<Process> iter = queueReady.iterator();
        while (iter.hasNext()) {
            Process temp = iter.next();
            System.out.println(temp.toString());

            String listEntry = Integer.toString(temp.pID) + " " + temp.pName;
            listReady.add(temp.toString());
        }

        if (ListBlocked != null) {
            Iterator<Process> it = ListBlocked.iterator();
            while (it.hasNext()) {
                Process temp = it.next();
                String listEntry2 = Integer.toString(temp.pID) + " " + temp.pName;
                listBlocked.add(temp.toString());
            }
        }

        if (runningProc != null) {

            System.out.println(runningProc.toString() + " pRunCount = " + runningProc.pRunCount);
            
            String listEntry3 = Integer.toString(runningProc.pID) + " " + runningProc.pName;
            listRunning.add(runningProc.toString());
        }
    }

    @SuppressWarnings("empty-statement")
    public void readFromFile(String filePath, PriorityQueue<Process> q, List<Process> l, Process p)
            throws FileNotFoundException, IOException, NullPointerException {
        q.clear();
        l.clear();
        p = null;
        
        
        Scanner readIn = new Scanner(new FileInputStream(filePath));
        //FileInputStream fileIn = new FileInputStream(filePath);
        //BufferedReader buff = new BufferedReader(new InputStreamReader(fileIn));

        while (readIn.hasNext()) {
            String lineRead = readIn.nextLine();
            lineRead = lineRead.trim();

            String[] arr = lineRead.split(" ");

            Process proc = new Process(Integer.parseInt(arr[0]), Integer.parseInt(arr[1]), arr[2]);

            q.add(proc);

        }
        readIn.close();

    }

    
    public void runProc()
    {
        if (runningProc == null && !queueReady.isEmpty())
        {
            runningProc = queueReady.poll();
            runningProc.pRunCount++;
            
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dispatcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dispatcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dispatcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dispatcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* 
         java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
         new dispatcher().setVisible(true);
         }
         }); */
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBlock;
    private javax.swing.JButton butExit;
    private javax.swing.JButton butLoad;
    private javax.swing.JButton butReset;
    private javax.swing.JButton butUnblock;
    private javax.swing.JButton butYield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblBlocked;
    private javax.swing.JLabel lblReady;
    private javax.swing.JLabel lblRunning;
    private java.awt.List listBlocked;
    private java.awt.List listReady;
    private java.awt.List listRunning;
    private javax.swing.JPanel status;
    private javax.swing.JTextField txtPid;
    private javax.swing.JTextField txtPname;
    private javax.swing.JTextField txtPstate;
    // End of variables declaration//GEN-END:variables

}
